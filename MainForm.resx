<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="updateTracking.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAgICAAICAgACAgIAAgICAAICAgACAgIAAbHRsAGBwYABgcGAAYHBgAGBwYABgcGAAYHBgEGBwYBBgc
        GAQYHBgEGBwYBBgcGAQYHBgEGBwYBBgcGAAYHBgAGBwYABgcGAAYHBgAGx0bACAgIAAgICAAICAgACAg
        IAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgABsdGwAYHBgAGBwYABgcGAAYHBgJGBwYCRgZ
        GBEYGRgRGBkYERgZGBEYGRgRGBkYERgZGBEYGRgRGBsYERgcGAkYHBgAGBwYABgcGAAbHRsAICAgACAg
        IAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAGx0bABgcGAAYHBgJGBwYEhgZ
        GBsYFxgjGBcYKhgXGDYYFxg2GBcYNhgXGDcYFxg3GBcYNxgXGCsYGBgjGBkYGhgbGBEYHBgJGBwYABsd
        GwAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAbHRsAGx0bABsdGwAdHx0IGBwYDhgZ
        GBIYFxgjGBQYNRgUGD4YFBhPGBQYXBgXGFwYFxhcGBQYXhgUGF4YFBheGBkYURgbGD0YGxg0GBsYIxgc
        GBoYHBgPGBwYCBsdGwAbHRsAGx0bACAgIAAgICAAICAgACAgIAAgICAAICAgABsdGwAYHBgAGBwYCRgc
        GAkVGBUiGBQYLhgUGEoYFBhmGBQYZhAUIJQQFCC5IywzzCMsM94oLzPrKC8z6ygvM9oIEBjIGBwYohgc
        GGwYHBhRGBwYNhscGxMbHBsTGxwbExscGwAbHRsAICAgACAgIAAgICAAICAgACAgIAAgICAAGx0bABgc
        GAkVGBUJFRgVIhUYFTwYFBhKGBQYZiUpK50lKSvVEBQg8RAUIPE1REXxNURF8UhNTfEoLzPxSE1N8UhN
        TfEYHBjzSFFT8xgcGL0YHBhsGBgYPRgYGBMYGBgTGxwbExsdGwAgICAAICAgACAgIAAbHRsAGx0bABsd
        GwAdHx0IGBwYCRUYFSITFBM8EBAQVRgUGIIlKSvVJSkr8SUpK/FIXFjxNURF8TVERfE1REXxKC8z8Sgv
        M/FITU3xaGxo8UhRU/NgbHDzMDc18xgcGNgdIB2QGxwbPRgYGBMbHBsTGBwYCBsdGwAbHRsAGx0bABgc
        GAAYHBgAGBwYABgcGA0VGBUiFRgVPBAQEFUTFBOIJSkr1SUpK/FAVFDxQFRQ8UhcWPEjLDPxEBQg8RAU
        IPEIEBjxCBAY8QgQGPEoLzPxMDc18zA3NfMwNzXzMDc18yAkIOMdIB25GBgYPRscGxMYHBgOGBwYABgc
        GAAYHBgAGBwYARgcGAEYHBgKGBkYEhAUEC0QFBBJEBQQgSMoKNUrMzv0YGhg8UVNTfArMzvwEBsr8BAQ
        GPAQJT3wEBsr8AgUKPAIFCjwDRww8A0cMPAQICjwECAo8BAgKPAQICjwKzE18ysxNfMrMTWqEBggPBgc
        GBYYHBgCGBwYAhgcGAIYHBgBGBwYARgbGBIYGRgkEBQQSRAUEGUjKCjVNTxA8UVNTfErMzvwEBgo8BAY
        KPAQGyvwECU98BAwUPAQGyvwDRww8BMkOPATJDjwDRww8BAgKPAQICjwECAo8BAgKPAQGCDzRUtL82Bk
        YPMrMTWFGBwYFhgcGBYYHBgCGBwYAhgcGAEYHBgBGBkYGxgYGDUQFBBlIygonSMoKPFIUFjxRU1N8BAY
        KPAQGCjwEBgo8BAlPfAQMFDwEDBQ8BAbK/AYLEDwGCxA8BMkOPANHDDwCxxA8BAgKPAQICjwECAo8BAY
        IPMQGCDzRUtL82BkYM4YHBhRGBwYFhgcGAIYHBgCGBwYARgZGAoYGBgkGBgYPhAUEGUjKCjVSFBY8UhQ
        WPEQGCjwEBgo8BAYKPAQGCjwECU98BAwUPAQMFDwECU98BgsQPAYLEDwGCxA8BMkOPAAFHDwCxxA8BAg
        KPAQICjwEBgg8xAYIPMrMTXzYGRg80BESIwYHBgWGBwYFhgcGAIbGxsEGxsbERgYGCoYGBhQGBwglBgc
        IPFASFjxMzlF8RAYKPAQGCjwEBgo8BAYKPALJFXwCCA48AskVfALJFXwECVL8Bg0SPAYNEjwECVL8AAY
        ePADGGDwCBgw8AgYMPAQGCjwEBgo8BAYKPAwSHD1cHx4xRgYGDYYGBgHGBgYBxsbGwQbGxsRGBgYNyAg
        IF0YHCC5MzlF8UBIWPEYHCDxEBgo8Aslg/AQGCjwEBgo8A0oc/AIIDjwCyRV8AggOPAQJUvwGDRI8Bg0
        SPAIF03wBRhI8AAYePAIGDDwBRhI8BsoQPAbKEDwEBgo8CU4WPRTW1j0NTk4ZhgYGAcYGBgHGxsbBBsb
        GxEYGBg3ICAgXRgcIMwzOUXxMzlF8RgcIPENH1XwDR9V8BAYKPALJYPwECyQ8AggOPAIIDjwCCA48AgX
        TfAIF03wGDRI8AgXTfAFGEjwABh48AMYYPAFGEjwGyhA8BsoQPAQGCjwGyhA8VNbWPQ1OTiVGBgYBxgY
        GAcbGxsEGxsbERgYGDcgICBdGBwg3iUrM/ElKzPxGBwg8Q0fVfAQGCjwCyWD8AgssPALJFXwCCA48Agg
        OPAIIDjwAAhQ8AAIUPAQJUvwCBdN8AUYSPADGGDwABh48AMYYPAbKEDwGyhA8BAYKPAQGCjxU1tY9FNb
        WJUYGBgHGBgYBxgcGAEVGRgUFRkYORAUGF8QGCDrKDA18SgwNfEQGCDxBRlY8AMXePAAFJjwBRlY8AsY
        WPAQGDDwEBgw8AsYWPAYMLjwGDC48A0jY/AIHDjwABRo8Asng/ALJ4PwCyeD8AAgwPAbK2XwKDA48Cgw
        OPCYoJj/bXNtlxgYGAYYGBgGGBwYARUZGBQVGRg5EBQYXygwNetASEvxKDA18RAYIPEFGVjwABSY8AUZ
        WPAFGVjwABio8BAYMPAQGDDwEBgw8A0jY/ANI2PwCBw48AgcOPAAFGjwCyeD8AAUaPALJ4PwACDA8Bsr
        ZfAoMDjwKDA48JigmPdtc22XGBgYBhgYGAYYHBgBFRkYFBUZGDkQFBhfKDA12VhgYPEoMDXxEBgg8Qgc
        OPAFGVjwCBw48AUZWPAAGKjwBRiA8BAYMPAQGDDwCBw48AgcOPANI2PwCBw48AAUaPALJ4PwABRo8AAU
        aPAbK2XwKDA48CgwOPAoMDjymKCY921zbZcYGBgGGBgYBhgcGAEVGRgUFRkYJxMXGEwQGCDHQEhL8Sgw
        NfEQGCDxCBw48AgcOPAFGVjwCBw48AUYgPAAGKjwEBgw8BAYMPAIHDjwCBw48A0jY/ANI2PwCyeD8AAU
        aPAAFGjwIEy48CgwOPAoMDjwKDA48CgwOPOYoJj3bXNtZhgYGAYYGBgGGBwYABgZGBEYGBgjGBgYPRgc
        IJ44P0DxKC0w8RgcIPEVKDXwIDg48BUoNfAACDDwCx1Y8AAQuPAAELjwBReI8BAoWPALJYDwBSOo8AAg
        0PATOaDwCBRA8A0ncPAYTNDwKDRA7yg0QO8oNEDvKDRA+oiYmN5DSENBICAYAiAgGAIYHBgAGBwYCRgZ
        GBoYGBg0GBwggzg/QPFIUFDxGBwg8RUoNfAgODjwCxgz8AAIMPALHVjwABC48AAQuPAAELjwBSOo8AAg
        0PAFI6jwACDQ8BM5oPAIFEDwDSdw8BM5oPAoNEDvKDRA7yg0QO99h4D6ZXBtvyAgGCEgIBgCICAYAhgc
        GAAYHBgAGBsYERgZGCMYHCBMGBwguigtMPEoLTDxCxgz8BUoNfALGDPwAAgw8AUXiPAFF4jwCx1Y8Asd
        WPAQKFjwEChY8BAoWPALJYDwEzmg8A0ncPAIFEDwCBRA8Cg0QO8oNEDvU11g732HgO9lcG1gICAYAiAg
        GAIgIBgCGBwYABgcGAAYHBgJGBwYGhgcIDAYHCBnOD9A8Tg/QPEVKDXwCxgz8AsYM/AACDDwBReI8BAk
        KPALHVjwCx1Y8BAoWPAQKFjwEChY8BAoWPANJ3DwDSdw8AgUQPAIFEDwKDRA7yg0QO9TXWD6qLCgrCAg
        GCEgIBgCICAYAiAgGAIYHBgAGBwYABgcGAAYHBgOGBwYExgcGEAoKyiZSEhI8jtDQPAQGCDwEBgg8BAY
        IPAQFCjwGyM48DBAWPAbIzjwIDBA8CtNa/AwXIDwIDBA8BggMO8YIDDvGCAw7xggMO9ITEv1cHh19XB4
        ddMgICBKICAgChUbFQAVGxUAFRsVABsdGwAbHRsAGx0bABgcGAgYHBgTGBwYExgcGEA4OTiZO0NA8DtD
        QPAlLTDwEBgg8BAUKPAbIzjwJTFI8BsjOPAgMEDwJT9V8CtNa/AgMEDwGCAw7xggMO8YIDDvQ0tT73B4
        dfWYpKDTSExLbCAgIAYgICAGGx0bABsdGwAbHRsAICAgACAgIAAgICAAGx0bABgcGBMYHBgTGBwYExgc
        GEAlLTCeO0NA8DtDQPAlLTDwGyM48BsjOPAbIzjwGyM48CAwQPAgMEDwIDBA8CU/VfBDS1PvQ0tT70NL
        U+9DS1P6cHh100hMS2wgICAGICAgBiAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAbHRsAGBwYABgc
        GBMYHBgTGBwYExAYIDElLTCDUFhQ1VBYUPAwQFj2MEBY9CUxSPIlMUjxIDBA8CAwQPAgMEDxJT9V80NL
        U/ptdXX6mKCY7211datITEtKICAgBiAgIAYgICAGICAgACAgIAAgICAAICAgACAgIAAgICAAICAgABsd
        GwAbHRsAGx0bABgcGAgYHBgOGBwYFBgcGCcjJyVMODxAhUtUVcVgcHD0YHBw9EtUVfQzNzv/TVVV/2h0
        cPZodHD2kJiQ2ZCYkLpFRUVeIBwgIRAYEAkVGxUHICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAg
        IAAgICAAICAgACAgIAAgICAAGx0bABgcGAAYHBgBGBwYFBgcGBQYHBgUIBwgNzU4O2Y1ODtmS1RVlk1V
        VZYzNzuWaHRwlk1VVWZFRUU/IBwgISAcIAIgHCACFRsVABsdGwAgICAAICAgACAgIAAgICAAICAgACAg
        IAAgICAAICAgACAgIAAgICAAICAgACAgIAAbHRsAGBwYABgcGAEYHBgBGBwYARgcGBQgHCAIIBwgCCAc
        IAggHCAIGBggBhgYIAYYGCAGGBggBiAcIAIgHCACIBwgAiAcIAIVGxUAGx0bACAgIAAgICAAICAgACAg
        IAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgABsdGwAYHBgAGBwYARgcGAEYHBgBGBwYASAc
        IAggHCAIIBwgCCAcIAgYGCAGGBggBhgYIAYYGCAGIBwgAiAcIAIgHCACIBwgAhUbFQAbHRsAICAgACAg
        IAAgICAAICAgACAgIAAgICAA///////////////////////wB///wAH//wAAf/4AAD/8AAAf/AAAD/gA
        AA/4AAAH8AAAB/AAAAfwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAfwAAAH8AAAB/gAAA/8AAAP/AAAH/4A
        AD//AAB//4AA///gA////h////////////8=
</value>
  </data>
</root>